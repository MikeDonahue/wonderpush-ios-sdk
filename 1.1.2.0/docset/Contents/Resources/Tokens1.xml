<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/WonderPush.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/WonderPush</TokenIdentifier>
			<Abstract type="html">WonderPush is your main interface to the WonderPush SDK.</Abstract>
			<DeclaredIn>WonderPush.h</DeclaredIn>
            
			
			<NodeRef refid="1"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/WonderPush/setClientId:secret:</TokenIdentifier>
			<Abstract type="html">Initializes the WonderPush SDK.</Abstract>
			<DeclaredIn>WonderPush.h</DeclaredIn>
			
			<Declaration>+ (void)setClientId:(NSString *)clientId secret:(NSString *)secret</Declaration>
			<Parameters>
				<Parameter>
					<Name>clientId</Name>
					<Abstract type="html">Your WonderPush client id</Abstract>
				</Parameter><Parameter>
					<Name>secret</Name>
					<Abstract type="html">Your WonderPush client secret</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/setClientId:secret:</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/WonderPush/setUserId:</TokenIdentifier>
			<Abstract type="html">Sets the user id, used to identify a single identity across multiple devices, and to correctly identify multiple users on a single device.</Abstract>
			<DeclaredIn>WonderPush.h</DeclaredIn>
			
			<Declaration>+ (void)setUserId:(NSString *)userId</Declaration>
			<Parameters>
				<Parameter>
					<Name>userId</Name>
					<Abstract type="html">The user id, unique to your application. Use nil for anonymous users.
     You are strongly encouraged to use your own unique internal identifier.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/setUserId:</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/WonderPush/isReady</TokenIdentifier>
			<Abstract type="html">Returns whether the WonderPush SDK is ready to operate.
Returns YES when the WPNOTIFICATIONINITIALIZED is sent.</Abstract>
			<DeclaredIn>WonderPush.h</DeclaredIn>
			
			<Declaration>+ (BOOL)isReady</Declaration>
			
			<ReturnValue><Abstract type="html">The initialization state as a BOOL</Abstract></ReturnValue>
			<Anchor>//api/name/isReady</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/WonderPush/setLogging:</TokenIdentifier>
			<Abstract type="html">Controls SDK logging.</Abstract>
			<DeclaredIn>WonderPush.h</DeclaredIn>
			
			<Declaration>+ (void)setLogging:(BOOL)enable</Declaration>
			<Parameters>
				<Parameter>
					<Name>enable</Name>
					<Abstract type="html">Whether to enable logs.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/setLogging:</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/WonderPush/userId</TokenIdentifier>
			<Abstract type="html">Returns the userId currently in use, nil by default.</Abstract>
			<DeclaredIn>WonderPush.h</DeclaredIn>
			
			<Declaration>+ (NSString *)userId</Declaration>
			
			
			<Anchor>//api/name/userId</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/WonderPush/installationId</TokenIdentifier>
			<Abstract type="html">Returns the installationId identifying your application on a device, bond to a specific userId.
If you want to store this information on your servers, keep the corresponding userId with it.
Will return nil until the SDK is properly initialized.</Abstract>
			<DeclaredIn>WonderPush.h</DeclaredIn>
			
			<Declaration>+ (NSString *)installationId</Declaration>
			
			
			<Anchor>//api/name/installationId</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/WonderPush/deviceId</TokenIdentifier>
			<Abstract type="html">Returns the unique device identifier.</Abstract>
			<DeclaredIn>WonderPush.h</DeclaredIn>
			
			<Declaration>+ (NSString *)deviceId</Declaration>
			
			
			<Anchor>//api/name/deviceId</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/WonderPush/pushToken</TokenIdentifier>
			<Abstract type="html">Returns the push token, or device token in Apple lingo.
Returns nil if the user is not opt-in.</Abstract>
			<DeclaredIn>WonderPush.h</DeclaredIn>
			
			<Declaration>+ (NSString *)pushToken</Declaration>
			
			
			<Anchor>//api/name/pushToken</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/WonderPush/getNotificationEnabled</TokenIdentifier>
			<Abstract type="html">Returns whether the notifications are enabled.</Abstract>
			<DeclaredIn>WonderPush.h</DeclaredIn>
			
			<Declaration>+ (BOOL)getNotificationEnabled</Declaration>
			
			
			<Anchor>//api/name/getNotificationEnabled</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/WonderPush/setNotificationEnabled:</TokenIdentifier>
			<Abstract type="html">Activates or deactivates the push notification on the device (if the user accepts) and registers the device token with WondePush.</Abstract>
			<DeclaredIn>WonderPush.h</DeclaredIn>
			
			<Declaration>+ (void)setNotificationEnabled:(BOOL)enabled</Declaration>
			<Parameters>
				<Parameter>
					<Name>enabled</Name>
					<Abstract type="html">The new activation state of push notifications.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/setNotificationEnabled:</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/WonderPush/handleApplicationLaunchWithOption:</TokenIdentifier>
			<Abstract type="html">Forwards an application delegate to the SDK.</Abstract>
			<DeclaredIn>WonderPush.h</DeclaredIn>
			
			<Declaration>+ (BOOL)handleApplicationLaunchWithOption:(NSDictionary *)launchOptions</Declaration>
			<Parameters>
				<Parameter>
					<Name>launchOptions</Name>
					<Abstract type="html">The launch options.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/handleApplicationLaunchWithOption:</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/WonderPush/handleDidReceiveRemoteNotification:</TokenIdentifier>
			<Abstract type="html">Forwards an application delegate to the SDK.</Abstract>
			<DeclaredIn>WonderPush.h</DeclaredIn>
			
			<Declaration>+ (BOOL)handleDidReceiveRemoteNotification:(NSDictionary *)userInfo</Declaration>
			<Parameters>
				<Parameter>
					<Name>userInfo</Name>
					<Abstract type="html">The userInfo provided by the system.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/handleDidReceiveRemoteNotification:</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/WonderPush/didRegisterForRemoteNotificationsWithDeviceToken:</TokenIdentifier>
			<Abstract type="html">Forwards an application delegate to the SDK.</Abstract>
			<DeclaredIn>WonderPush.h</DeclaredIn>
			
			<Declaration>+ (void)didRegisterForRemoteNotificationsWithDeviceToken:(NSData *)deviceToken</Declaration>
			<Parameters>
				<Parameter>
					<Name>deviceToken</Name>
					<Abstract type="html">The device token provided by the system.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/didRegisterForRemoteNotificationsWithDeviceToken:</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/WonderPush/didFailToRegisterForRemoteNotificationsWithError:</TokenIdentifier>
			<Abstract type="html">Forwards an application delegate to the SDK.</Abstract>
			<DeclaredIn>WonderPush.h</DeclaredIn>
			
			<Declaration>+ (void)didFailToRegisterForRemoteNotificationsWithError:(NSError *)error</Declaration>
			<Parameters>
				<Parameter>
					<Name>error</Name>
					<Abstract type="html">The error provided by the system.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/didFailToRegisterForRemoteNotificationsWithError:</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/WonderPush/handleNotification:</TokenIdentifier>
			<Abstract type="html">Forwards an application delegate to the SDK.</Abstract>
			<DeclaredIn>WonderPush.h</DeclaredIn>
			
			<Declaration>+ (BOOL)handleNotification:(NSDictionary *)notificationUserInfo</Declaration>
			<Parameters>
				<Parameter>
					<Name>notificationUserInfo</Name>
					<Abstract type="html">The UILocalNotification userInfo member.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/handleNotification:</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/WonderPush/handleNotificationReceivedInBackground:</TokenIdentifier>
			<Abstract type="html">Forwards an application delegate to the SDK.</Abstract>
			<DeclaredIn>WonderPush.h</DeclaredIn>
			
			<Declaration>+ (void)handleNotificationReceivedInBackground:(NSDictionary *)userInfo</Declaration>
			<Parameters>
				<Parameter>
					<Name>userInfo</Name>
					<Abstract type="html">The userInfo provided by the system.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/handleNotificationReceivedInBackground:</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/WonderPush/applicationDidBecomeActive:</TokenIdentifier>
			<Abstract type="html">Forwards an application delegate to the SDK.</Abstract>
			<DeclaredIn>WonderPush.h</DeclaredIn>
			
			<Declaration>+ (void)applicationDidBecomeActive:(UIApplication *)application</Declaration>
			<Parameters>
				<Parameter>
					<Name>application</Name>
					<Abstract type="html">The application provided by the system.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/applicationDidBecomeActive:</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/WonderPush/applicationDidEnterBackground:</TokenIdentifier>
			<Abstract type="html">Forwards an application delegate to the SDK.</Abstract>
			<DeclaredIn>WonderPush.h</DeclaredIn>
			
			<Declaration>+ (void)applicationDidEnterBackground:(UIApplication *)application</Declaration>
			<Parameters>
				<Parameter>
					<Name>application</Name>
					<Abstract type="html">The application provided by the system.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/applicationDidEnterBackground:</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/WonderPush/putInstallationCustomProperties:</TokenIdentifier>
			<Abstract type="html">Updates the custom properties attached to the current installation object stored by WonderPush.</Abstract>
			<DeclaredIn>WonderPush.h</DeclaredIn>
			
			<Declaration>+ (void)putInstallationCustomProperties:(NSDictionary *)customProperties</Declaration>
			<Parameters>
				<Parameter>
					<Name>customProperties</Name>
					<Abstract type="html">The partial object containing only the properties to update.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/putInstallationCustomProperties:</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/WonderPush/trackEvent:withData:</TokenIdentifier>
			<Abstract type="html">Send an event to be tracked to WonderPush.</Abstract>
			<DeclaredIn>WonderPush.h</DeclaredIn>
			
			<Declaration>+ (void)trackEvent:(NSString *)type withData:(id)data</Declaration>
			<Parameters>
				<Parameter>
					<Name>type</Name>
					<Abstract type="html">The event type, or name. Event types starting with an @ character are reserved.</Abstract>
				</Parameter><Parameter>
					<Name>data</Name>
					<Abstract type="html">A dictionary containing custom properties to be attached to the event.
     Prefer using a few custom properties over a plethora of event type variants.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/trackEvent:withData:</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
        
        
	</File>
</Tokens>